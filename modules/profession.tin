#nop --
#nop Class Definitions v0.01
#nop --

#var profession-description {Utilities for botting}
#var profession-help {
Commands:\n
\tprofon <profession> / profoff      profreset \n
\ttanon / tanoff  \n
\tAlias: skinlist  \n
\n
}

#nop --
#nop Modloader Stuff
#nop --

#alias profession-register {
	#if {@isloaded{modloader}} {

		register_module profession
	} {
		#class profession kill
	}
}


#NOP #######################################################
#NOP Profession unique variables
#NOP #######################################################

#nop Gathering an be: skinning, butcher, extract
#var profession[gather][type] skinning
#var profession[gather][auto] 1
#var profession[gather][all] 0
#var profession[gather][success] 0
#var profession[gather][total] 0
#var profession[gather][receiver] {} ;#nop Empty will donate to own house, or else to <value> house

#alias profon 	{
	#var profession[gather][auto] 1;
	generate_profession_info;
	#show Will start gathering: %1;
	#SWITCH {"%1"} {
		#CASE {"skinning"} {#var profession[gather][type] %1;#var profession[gather][all] 0};
		#CASE {"butcher"} {#var profession[gather][type] %1;#var profession[gather][all] 0};
		#CASE {"extract"} {#var profession[gather][type] %1;#var profession[gather][all] 0};
		#CASE {"all"} {#var profession[gather][all] 1};
		#DEFAULT {#show Not a supported profession}
	}
}
#alias profoff 	{#var profession[gather][auto] 0;generate_profession_info;#show Will no longer gather anything;#var profession[gather][all] 0}
#alias {profreset} {#var profession[gather][success] 0;#var profession[gather][total] 0;generate_profession_info;}


#nop Refining can be: tan, cook, carve
#var profession[refining][type] tanning
#var profession[refining][auto] 0
#var profession[refining][reset] 1
#var profession[refining][start] 0;
#var profession[refining][startgold] 0;
#var profession[refining][startexp] 0;

#var profession[refresher] Kaicha
#var hidespickedup 0;



#NOP #######################################################
#NOP Profession panel
#NOP #######################################################
event_register {variable profession[gather][total]} {right} {generate_profession_info};
#alias generate_profession_info {
	#if $profession[gather][auto] {
		#if {"$profession[gather][receiver]" != ""} {
			#var profession_gather_info {$profession[gather][type] ($profession[gather][success]/$profession[gather][total]) @pct{$profession[gather][success];$profession[gather][total]} %  DonateTo: $profession[gather][receiver]};
		};
		#else {
			#var profession_gather_info {$profession[gather][type] ($profession[gather][success]/$profession[gather][total]) @pct{$profession[gather][success];$profession[gather][total]} %  DonateTo: Self};
		}
	};
	#else {
		#var profession_gather_info {Gathering: Offline};	
	};
	#if $profession[refining][auto] {
		#var profession_gather_info {$profession_gather_info \n$profession[refining][type]:$profession[refining][auto]}
	};#else  {
		#var profession_gather_info {$profession_gather_info \nRefining: Offline}
	};
    #if {@is_alias{display_right_tiles}} {display_right_tiles};
}

#if {&{right_tiles}} {
	set_right_tile 11 <B5f819d> profession_gather_info 2 tile;
	generate_profession_info;
}

#alias {do_gather} {
	#SWITCH {"$profession[gather][type]"} {
		#CASE {"skinning"} {do_skin %1};
		#CASE {"butcher"} {do_butcher %1};
		#CASE {"extract"} {do_extract %1};
		#DEFAULT {#nop}
	}; 
}




#NOP #######################################################
#NOP Professions - Skinning;
#NOP #######################################################

#NOP Entered new zone, update corpses to be skinned

#alias {do_skin} {
	#if $profession[gather][auto] {
		#if $profession[gather][all] {
			queueAdd priority {skin corpse};
		};#else {
			#show <121><<< Skin? %0 >>>;
			#if { &zone[skinlist]["%0"]>0 } {
				queueAdd priority {skin corpse};
			}
		}
	}
}


#ACTION {You skin some %1 hide from} {
	#show Skin type:[<131>%1];
	#math profession[gather][total] {$profession[gather][total]+1};
	#switch {"%1"} {
		#case {"junk"} {sac hide};
		#case {"rough"} {sac hide};
		#case {"average"} {donate hide home};
		#default {
			#if { "$profession[gather][receiver]"=="" } {
				donate hide home;
			};
			#else {
				give hide $profession[gather][receiver];
			};
			#math profession[gather][success] {$profession[gather][success]+1}
		}
	};
	generate_profession_info;
}



#NOP #######################################################
#NOP Professions - Chirurgy;
#NOP #######################################################

#NOP Entered new zone, update corpses to be extracted
#var zone[extractlist] {{"A kakapo"}{} {"A puffin"}{} {"A giant petrel"}{} {"A common murre"}{} {"A skua"}{} {"A northern gannet"}{} {"A sooty tern"}{} {"A weka"}{} {"A takahe"}{} {"A pelegornis"}{} {"A royal albatross"}{} {"A spectacled cormorant"}{} {"A giant moa"}};

#alias {do_extract} {
	#if $profession[gather][auto] {
		#if $profession[gather][all] {
			queueAdd priority {extract corpse};
		};#else {
			#show <121><<< Extract? %0 >>>;
			#if { &zone[extractlist]["%0"]>0 } {
				queueAdd priority {extract corpse};
			}
		}
	}
}


#ACTION {You extract some %1 bone from} {
	#show Bone type:[<131>%1];
	#math profession[gather][total] {$profession[gather][total]+1};
	#switch {"%1"} {
		#case {"junk"} {sac bone};
		#case {"rough"} {sac bone};
		#case {"average"} {donate bone home};
		#default {
			#if { "$profession[gather][receiver]"=="" } {
				donate bone home;
			};
			#else {
				give bone $profession[gather][receiver];
			};
			#math profession[gather][success] {$profession[gather][success]+1}
		}
	};
	generate_profession_info;
}



#NOP #######################################################
#NOP Auto tan 
#NOP #######################################################
#alias tanon {
	#var profession[refining][auto] 1;
	generate_profession_info;
	#show Will auto tan hides;
	#var profession[refining][start] $MSDP_UPTIME;
	#var profession[refining][startgold] $MSDP_BANK_GOLD;
	#var profession[refining][startexp] $MSDP_EXPERIENCE;
	#var profession[refining][sold] 0;
	get all.hide;
	visit houseofanasasi;
	e;
	tan hide
}



#alias tanoff {
	#math profession[refining][earnedgold] {$MSDP_BANK_GOLD - $profession[refining][startgold]};
	#math profession[refining][earnedexp] {$MSDP_EXPERIENCE - $profession[refining][startexp]};
	#math profession[refining][averagesell] {$profession[refining][earnedexp] / $profession[refining][sold]};
	#math profession[refining][runtime] {$MSDP_UPTIME - $profession[refining][start]};
	#var profession[refining][auto] 0;
	generate_profession_info;
	#show Will no longer auto tan hides;
	gt <<< Tanning session done:>>>;
	gt Time: [@return_min_sec{$profession[refining][runtime]}]  Sold: [$profession[refining][sold]] Average: [$profession[refining][averagesell]]  Gold: [$profession[refining][earnedgold]]  Exp: [$profession[refining][earnedexp]];
}


#action {You tan some %1 hide from %2 into some %3 leather from %4.} {
	#show Leather Quality:[<131>%3];
	#switch {"%3"} {
		#case {"flawless"} {#nop;tan hide};
		#case {"divine"} {#nop donate divine home;tan hide};
		#default {#show keep for selling;tan hide}
	}
}

#action {You fail to improve it.} {#if $profession[refining][auto] tan hide}
#action {Oops, you cracked it a little.} {#if $profession[refining][auto] tan hide}
#action {You are exhausted!} {#if $profession[refining][auto] {#delay waitforrefresh {tan hide} {3}}}
#action {The some %0 hide from %1 isn't high enough quality to tan.} {#if $profession[refining][auto] {sac hide;tan hide}}

#action {You must also specify what you want to tan.} {
	#if { $profession[refining][reset] && $profession[refining][auto] } {
		#var totalhides 0;
		#var profession[refining][reset] 0;w;recall;2s3es;sell leather;
	};
	#else {
		#show no more hides left;
		tanoff;
	}
}

#action {The tanner tells you, 'It appears that %0 was previously donated and I don't buy donated items!'} {sac leather;sell leather}
#action {The tanner tells you, 'I'll give you %1 coins for that.'} {#variable profession[refining][sold] @increment{$profession[refining][sold]};sell leather}
#action {The tanner tells you, 'Please empty a leather backpack first.'} {visit houseofanasasi;dep all;pickup_hides}
#action {The tanner tells you, 'Are you sure you have that?'} {visit houseofanasasi;dep all;pickup_hides}

#alias pickup_hides {		
	#if { $profession[refining][auto] } {
		visit eremitage;e;get all.hide;
		visit kruoill;e;get all.hide;
		visit houseofanasasi;e;get all.hide;
		counthides;tan hide;
	}
}

#nop action {There aren't any hides here you can take.} {#if {$profession[refining][auto] && $profession[refining][reset]} {#var profession[refining][reset] 0;gt No more hides at $profession[refining][donationroom]}}

#action {Some hide from %0 lies here. (%1)} {#math totalhides {$totalhides+%1}}
#action {You pick up %1 hides.} {#var profession[refining][reset] 1;#var hidespickedup %1;#math totalhidesremaining {$totalhides-%1}}
#alias counthides {#delay removetotal {gt $profession[refining][sold] sold, $totalhidesremaining remaining} {5}}




#NOP #######################################################
#NOP Auto carving 
#NOP #######################################################
#alias maton {
	#var profession[refining][auto] 1;
	generate_profession_info;
	#var profession[refining][start] $MSDP_UPTIME;
	#var profession[refining][startgold] $MSDP_BANK_GOLD;
	#var profession[refining][startexp] $MSDP_EXPERIENCE;
	#var profession[refining][sold] 0;
	#show Will auto process materials;
	#var profession[str_pickup] {get all.bone};
	#var profession[str_action] {carve bone};	
}

#alias matoff {
	#math profession[refining][earnedgold] {$MSDP_BANK_GOLD - $profession[refining][startgold]};
	#math profession[refining][earnedexp] {$MSDP_EXPERIENCE - $profession[refining][startexp]};
	#math profession[refining][averagesell] {$profession[refining][earnedexp] / $profession[refining][sold]};
	#math profession[refining][runtime] {$MSDP_UPTIME - $profession[refining][start]};
	#var profession[refining][auto] 0;
	generate_profession_info;
	#show Will no longer auto carve bone;
	gt <<< Carving session done:>>>;
	gt Time: [@return_min_sec{$profession[refining][runtime]}]  Sold: [$profession[refining][sold]] Average: [$profession[refining][averagesell]]  Gold: [$profession[refining][earnedgold]]  Exp: [$profession[refining][earnedexp]];
}

#action {You carve some %1 bone from %2 into some %3 bone from %4.} {
	#show Material Quality:[<131>%3];
	#switch {"%3"} {
		#case {"flawless"} {donate bone home;carve bone};
		#case {"divine"} {donate bone home;carve bone};
		#default {#show keep for selling;donate bone;carve bone}
	}
}

#action {You fail to improve it.} {#if $profession[refining][auto] carve bone}
#action {Oops, you cracked it a little.} {#if $profession[refining][auto] carve bone}
#action {You are exhausted!} {#if $profession[refining][auto] {#delay waitforrefresh {carve bone} {3}}}
#action {The some %0 bone from %1 isn't high enough quality to carve.} {#if $profession[refining][auto] {sac bone;carve bone}}
#action {You can't carve that.} {donate bone home}


#action {You must also specify what you want to carve.} {
	recall;visit eremi;e;get all.bone;recall;3s2w;open gate;2s;open door;s2u4es;carve bone;
	#if { ($profession[refining][reset]) && ($profession[refining][auto]) && (2==3) } {
		#nop var totalhides 0;
		#nop var profession[refining][reset] 0;w;recall;2s3es;sell leather;
	};
	#else {
		#show no more hides left;
		#nop tanoff;
	}
}

#alias pickup_mats {		
	#if { $profession[refining][auto] } {
		visit eremitage;e;$profession[str_pickup];
		visit kruoill;e;$profession[str_pickup];
		visit houseofanasasi;e;$profession[str_pickup];
		counthides;$profession[str_action];
	}
}
