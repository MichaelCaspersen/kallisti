#nop --
#nop Class Definitions v0.01
#nop --

#var profession-description {Utilities for botting}
#var profession-help {
Commands:\n
\tprofon <profession> / profoff      profreset \n
\ttanon / tanoff  \n
\tAlias:   \n
\n
}

#nop --
#nop Modloader Stuff
#nop --

#alias profession-register {
	#if {@isloaded{modloader}} {

		register_module profession
	} {
		#class profession kill
	}
}


#NOP #######################################################
#NOP Profession unique variables
#NOP #######################################################

#nop Gathering an be: skinning, butcher, extract
#var profession[gather][type] skinning
#var profession[gather][auto] 1
#var profession[gather][all] 0
#var profession[gather][success] 0
#var profession[gather][total] 0
#var profession[gather][receiver] {Kr} ;#nop Empty will donate to own house, or else to <value> house
#var profession[gather][selling] 0;

#alias profon 	{
	#var profession[gather][auto] 1;
	generate_profession_info;
	highlight_materials_on;
	#show Will start gathering: %1;
	#SWITCH {"%1"} {
		#CASE {"skinning"} {
			#var profession[gather][type] skinning;
			#var profession[str_mat] {hide};
			#var profession[str_corpse] {skin corpse};
			#var profession[str_pickup] {get all.hide};
			#var profession[str_action] {tan hide};
			#var profession[str_sack] {sac hide};
			#var profession[refine_location] {visit houseofanasasi;e};
			#var profession[gather][all] 0
		};
		#CASE {"butcher"} {
			#var profession[gather][type] %1;
			#var profession[str_mat] {meat};
			#var profession[str_corpse] {butcher corpse};
			#var profession[str_pickup] {get all.meat};
			#var profession[str_action] {cook meat};
			#var profession[str_sack] {sac meat};
			#var profession[refine_location] {visit houseofanasasi;e};
			#var profession[gather][all] 0
		};
		#CASE {"extract"} {
			#var profession[gather][type] %1;
			#var profession[str_mat] {bone};
			#var profession[str_corpse] {extract corpse};
			#var profession[str_pickup] {get all.bone};
			#var profession[str_action] {bonecraft bone};
			#var profession[str_sack] {sac bone};
			#var profession[refine_location] {visit houseofanasasi;e};
			#var profession[gather][all] 0
		};
		#CASE {"carving"} {
			#var profession[gather][type] %1;
			#var profession[str_mat] {tooth};
			#var profession[str_corpse] {extract corpse};
			#var profession[str_pickup] {get all.tooth};
			#var profession[str_action] {carve tooth};
			#var profession[str_sack] {sac tooth};
			#var profession[refine_location] {visit houseofanasasi;e};
			#var profession[gather][all] 0
		};
		#CASE {"bonecraft"} {
			#var profession[gather][type] %1;
			#var profession[str_mat] {bone};
			#var profession[str_corpse] {extract corpse};
			#var profession[str_pickup] {get all.bone};
			#var profession[str_action] {bonecraft bone};
			#var profession[str_sack] {sac bone};
			#var profession[refine_location] {visit houseofanasasi;e};
			#var profession[gather][all] 0
		};
		#CASE {"all"} {
			#var profession[gather][all] 1
		};
		#DEFAULT {#show Not a supported profession}
	}
}
#alias profoff 	{#var profession[gather][auto] 0;highlight_materials_off;generate_profession_info;#show Will no longer gather anything;#var profession[gather][all] 0}
#alias {profreset} {#var profession[gather][success] 0;#var profession[gather][total] 0;generate_profession_info;}

#alias highlight_materials_on {
	#highlight {junk hide} {reverse underscore Pink};
	#highlight {rough hide} {reverse underscore Pink};
	#highlight {average hide} {reverse underscore Jade};
	#highlight {good hide} {reverse underscore Jade};
	#highlight {excellent hide} {reverse underscore Jade};
	#highlight {superior hide} {reverse underscore Jade};
	#highlight {pristine hide} {reverse underscore Jade};
	#highlight {exquisite hide} {reverse underscore Jade};
	#highlight {flawless hide} {reverse underscore Jade};
	#highlight {divine hide} {reverse underscore Jade};
	#highlight {junk bone} {reverse underscore Pink};
	#highlight {rough bone} {reverse underscore Pink};
	#highlight {average bone} {reverse underscore Jade};
	#highlight {good bone} {reverse underscore Jade};
	#highlight {excellent bone} {reverse underscore Jade};
	#highlight {superior bone} {reverse underscore Jade};
	#highlight {pristine bone} {reverse underscore Jade};
	#highlight {exquisite bone} {reverse underscore Jade};
	#highlight {flawless bone} {reverse underscore Jade};
	#highlight {divine bone} {reverse underscore Jade};
}

#alias highlight_materials_off {
	#unhighlight {junk hide};
	#unhighlight {rough hide};
	#unhighlight {average hide};
	#unhighlight {good hide};
	#unhighlight {excellent hide};
	#unhighlight {superior hide};
	#unhighlight {pristine hide};
	#unhighlight {exquisite hide};
	#unhighlight {flawless hide};
	#unhighlight {divine hide};
	#unhighlight {junk bone};
	#unhighlight {rough bone};
	#unhighlight {average bone};
	#unhighlight {good bone};
	#unhighlight {excellent bone};
	#unhighlight {superior bone};
	#unhighlight {pristine bone};
	#unhighlight {exquisite bone};
	#unhighlight {flawless bone};
	#unhighlight {divine bone};
}

#nop Refining can be: tan, cook, carve
#var profession[refining][type] tanning
#var profession[refining][auto] 0
#var profession[refining][reset] 1
#var profession[refining][start] 0;
#var profession[refining][startgold] 0;
#var profession[refining][startexp] 0;
#var profession[refining][haggledgold] 0;

#var profession[refresher] Krell
#var hidespickedup 0;



#NOP #######################################################
#NOP Profession panel
#NOP #######################################################
event_register {variable profession[gather][total]} {right} {generate_profession_info};
#alias generate_profession_info {
	#if $profession[gather][auto] {
		#if {"$profession[gather][receiver]" != ""} {
			#var profession_gather_info {$profession[gather][type] ($profession[gather][success]/$profession[gather][total]) @pct{$profession[gather][success];$profession[gather][total]} %  DonateTo: $profession[gather][receiver]};
		};
		#else {
			#var profession_gather_info {$profession[gather][type] ($profession[gather][success]/$profession[gather][total]) @pct{$profession[gather][success];$profession[gather][total]} %  DonateTo: Self};
		}
	};
	#else {
		#var profession_gather_info {Gathering: Offline};	
	};
	#if $profession[refining][auto] {
		#var profession_gather_info {$profession_gather_info \n$profession[refining][type]:$profession[refining][auto]   Selling:$profession[gather][selling]}
	};#else  {
		#var profession_gather_info {$profession_gather_info \nRefining: Offline}
	};
    #if {@is_alias{display_right_tiles}} {display_right_tiles};
}

#if {&{right_tiles}} {
	set_right_tile 11 <B5f819d> profession_gather_info 2 tile;
	generate_profession_info;
}



#NOP #######################################################
#NOP Professions - Gathering;
#NOP #######################################################

#alias {do_gather} {
	show_debug {<121><<< $profession[gather][type] ? >>%0<<   , in list: &zone[proflist]["%0"] >>>};
	#if { $profession[gather][auto] } {
		#if { $profession[gather][all] } {
			queueAdd any { $profession[str_corpse]};
		};#else {
			#if { &zone[proflist]["%0"]>0 } {
				queueAdd any { $profession[str_corpse] };
			}
		}
	}
}


#ACTION {You {skin|extract|butcher} some %1 {hide|bone|meat} from} {
	show_debug $profession[str_mat] type:[<131>%1];
	#math profession[gather][total] {$profession[gather][total]+1};
	#switch {"%1"} {
		#case {"junk"} { $profession[str_sack] };
		#case {"rough"} { $profession[str_sack] };
		#default {
			#if { "$profession[gather][receiver]"=="" } {
				donate $profession[str_mat] home;
			};
			#else {
				give $profession[str_mat] $profession[gather][receiver];
			};
			#math profession[gather][success] {$profession[gather][success]+1}
		}
	};
	generate_profession_info;
}

#action {%1 gives you some %2 hide from %3.} {
	#switch {"%2"} {
		#case {"junk"} { $profession[str_sack] };
		#case {"rough"} { $profession[str_sack] };
		#default {
			donate $profession[str_mat] home;
			#math profession[gather][success] {$profession[gather][success]+1}
		};
	};
	generate_profession_info;
}

#var autopickuphides 0;
#action {Some hide from %1 lies here.} {#if $autopickuphides {get hide}}

#action {You get some %1 hide from %2.} {
	#switch {"%1"} {
		#case {"junk"} { sac hide };
		#case {"rough"} { sac hide };
		#default {
			donate hide home;
		};
	};
	l
}

#NOP #######################################################
#NOP Auto Profession 
#NOP #######################################################
#alias maton {
	#var profession[refining][auto] 1;
	#if { $MSDP_UPTIME>86400 } {
		#var profession[gather][selling] 1;
	};
	generate_profession_info;
	#var profession[refining][start] $MSDP_UPTIME;
	#var profession[refining][startgold] $MSDP_BANK_GOLD;
	#var profession[refining][startexp] $MSDP_EXPERIENCE;
	#var profession[refining][haggledgold] 0;
	#var profession[refining][sold] 0;
	#show Will auto process materials from %1;
	#var profession[mat_location] %1;
	#SWITCH {"$profession[gather][type]"} {
		#CASE {"skinning"} {
			#var profession[str_mat] {hide};
			#var profession[str_pickup] {get all.hide};
			#var profession[str_action] {tan hide};
			#var profession[str_sack] {sac hide};
			#var profession[refine_location] {visit houseofanasasi;e};
		};
		#CASE {"butcher"} {
			#var profession[str_mat] {meat};
			#var profession[str_pickup] {get all.meat};
			#var profession[str_action] {cook meat};	
			#var profession[str_sack] {sac meat};
			#var profession[refine_location] {visit houseofanasasi;e};
		};
		#CASE {"extract"} {
			#var profession[str_mat] {bone};
			#var profession[str_pickup] {get all.bone};
			#var profession[str_action] {carve bone};	
			#var profession[str_sack] {sac bone};
			#var profession[refine_location] {visit houseofanasasi;e};
		};
		#CASE {"bonecraft"} {
			#var profession[str_mat] {bone};
			#var profession[str_pickup] {get all.bone robe};
			#var profession[str_action] {bonecraft bone};	
			#var profession[str_sack] {sac bone};
			#var profession[refine_location] {visit houseofanasasi;e};
		};
		#CASE {"phyl"} {
			#var profession[str_mat] {bone};
			#var profession[str_pickup] {get all.bone};
			#var profession[str_action] {phylactery bone};	
			#var profession[str_sack] {sac bone};
			#var profession[refine_location] {visit houseofanasasi;e};
		};
		#DEFAULT {#nop}
	}; 

}

#alias matoff {
	#math profession[refining][earnedgold] {$MSDP_BANK_GOLD - $profession[refining][startgold]};
	#math profession[refining][earnedexp] {$MSDP_EXPERIENCE - $profession[refining][startexp]};
	#math profession[refining][averagesell] {$profession[refining][earnedexp] / $profession[refining][sold]};
	#math profession[refining][runtime] {$MSDP_UPTIME - $profession[refining][start]};
	#var profession[refining][auto] 0;
	generate_profession_info;
	#show Will no longer process $profession[str_mat];
	gt <<< Processing session done: $profession[gather][type] >>>;
	gt Time: [@return_min_sec{$profession[refining][runtime]}]  Processed: [$profession[refining][sold]] Average: [$profession[refining][averagesell]]  Gold: [@pretty_number{$profession[refining][earnedgold]}]  Exp: [@pretty_number{$profession[refining][earnedexp]}]  Haggled: [@pretty_number{$profession[refining][haggledgold]}];
}

#action {You don't have access to the proper equipment here.} {#var profession[refining][auto] 0}

#var needmeta 0;
#action {There aren't any hides here you can take.} {#if {$profession[refining][auto]} {gt <<< Need to meta or level >>>;matoff}}
#action {You are nearing the cap for bankable xp, consider 'meta' or 'gain' now.} {#if {$profession[refining][auto]} {gt <<< Need to meta or level >>>;matoff};#if {$needmeta==0} {#var needmeta 1;nco return_and_meta}}
#action {The weight of your experience thrums a discordant note in your soul.} {#if {$profession[refining][auto]} {gt <<< Need to meta or level >>>;matoff};#if {$needmeta==0} {#var needmeta 1;nco return_and_meta}}

#NOP #######################################################
#NOP Crafting - Daggers, Symbols
#NOP #######################################################

#action {You craft {a|an} %1 {dagger|symbol} made from {a |an |}%3 {bone}.} { exa %2 }

#nop action {Damage Dice: %1d%2 (%3)} {#if { $profession[refining][auto] } {#if { (%3>20) } {drop dagger;$profession[str_action]};#else { sac dagger }}}
#action {You sacrifice the {dagger|symbol} to the gods.} {#if $profession[refining][auto] {nco $profession[str_action]}}

#action {  +%1 UnholySymbol} {	
	#if { $profession[refining][auto] } {
		#if { (%1>65) } { 
			drop symbol;
			nco $profession[str_action]
		};#else { nco sac symbol }
	}
}

#action {You {tan|carve} %1 {hide|bone|tooth}%2into some %3 {leather|bone} from %4.} {
	#if {$profession[refining][auto]} {
		#show Material Quality:[<131>%3];
		#switch {"%3"} {
			#case {"flawless"} {
				#if {"$profession[gather][type]"=="extract"} {donate $profession[str_mat] home;};
				nco $profession[str_action]
			};
			#case {"divine"} {
				#if {"$profession[gather][type]"=="extract"} {donate $profession[str_mat] home;};
				nco $profession[str_action]
			};
			#default {
				#if {"$profession[gather][type]"=="extract"} {donate $profession[str_mat] home;};
				nco $profession[str_action]
			}
		}
	}
}

#action {You {fail|failed} to {improve it|craft anything useful}.} {#if $profession[refining][auto] {nco $profession[str_action]}}
#action {Oops, you cracked it a little.} {#if $profession[refining][auto] {nco $profession[str_action]}}
#action {You are exhausted!} {#if $profession[refining][auto] {#delay waitforrefresh {nco $profession[str_action]} {3}}}
#action {The some %0 {hide|bone} from %1 isn't high enough quality to {tan|carve}.} {#if $profession[refining][auto] {nco $profession[str_sack];nco $profession[str_action]}}
#action {You can't carve that.} {donate bone home;nco $profession[str_action]}


#action {You must also specify what material you want to use when {bonecrafting|making a holy symbol}.} {
	#var total_mats 0;
	recall;
	#if { ($profession[refining][reset]) && ($profession[refining][auto]) } {
		#if {"$profession[gather][type]"=="phyl"} {
			#var profession[refining][reset] 0;
			pickup_mats;
		};
		#if {"$profession[gather][type]"=="bonecraft"} {
			#var profession[refining][reset] 0;
			pickup_mats;
		};
	};
	#else {
		#show no more $profession[str_mat] left;
		matoff;
	}
}


#action {You must also specify what you want to {tan|carve}.} {
	#var total_mats 0;
	#if { ($profession[refining][reset]) && ($profession[refining][auto]) } {
		#if {"$profession[gather][type]"=="extract"} {
			#var profession[refining][reset] 0;
			recall;
			pickup_mats;
		};
		#if {"$profession[gather][type]"=="carving"} {
			#var profession[refining][reset] 0;
			3w;put all.bone robe;3e;
			get all.tooth pack;
			carve tooth;
		};
		#if {"$profession[gather][type]"=="skinning"} {
			#if $profession[gather][selling] {
				#var profession[refining][reset] 0;
				recall;
				2s3es;
				sell leather;
			}; #else {
				drop all.leather;
				get all.hide backpack;
				pickup_mats;
			}
		};
	};
	#else {
		#show no more $profession[str_mat] left;
		matoff;
	}
}


#alias pickup_mats {
	#if { $profession[refining][auto] } {
		visit $profession[mat_location];
		e;
		$profession[str_pickup];
		countmats;
		egress;
		$profession[refine_location];
		nco $profession[str_action];
	}
}


#action {Your personal donation fairy whisks away the bone to your manor.} {#variable profession[refining][sold] @increment{$profession[refining][sold]}}

#action {Some {hide|bone} from %2 lies here. (%3)} {#math total_mats {$total_mats+%3}}
#action {You pick up %1 {hides|bones}.} {#var profession[refining][reset] 1;#var total_mats_pickedup %1;#math total_mats_remaining {$total_mats-%1};#math total_rounds_remaining {$total_mats_remaining/$total_mats_pickedup}}
#alias countmats {#math profession[refining][runtime] {$MSDP_UPTIME - $profession[refining][start]};#delay removetotal {gt $communication[left] Sold: $profession[refining][sold]  Left: $total_mats_remaining  Laps remaining: $total_rounds_remaining  Time spent: @return_min_sec{$profession[refining][runtime]} $communication[right]} {5}}



#NOP #######################################################
#NOP Vendor actions 
#NOP #######################################################
#action {The tanner tells you, 'It appears that %0 was previously donated and I don't buy donated items!'} {sac leather;sell leather}
#action {The tanner tells you, 'I'll give you %1 coins for that.'} {#variable profession[refining][sold] @increment{$profession[refining][sold]};sell leather}
#action {You haggle to increase the price by %1 coins.} {#math profession[refining][haggledgold] {$profession[refining][haggledgold]+%1}}
#action {The tanner tells you, 'Please empty a leather backpack first.'} {visit houseofanasasi;dep all;#if {$profession[gather][selling] && $profession[refining][auto]} {e;get all.leather;egress;2s3es;sell leather};#else {pickup_mats}}
#action {The tanner tells you, 'Are you sure you have that?'} {visit houseofanasasi;dep all;#if {$profession[gather][selling] && $profession[refining][auto]} {e;get all.leather;egress;2s3es;sell leather};#else {pickup_mats}}
#action {There aren't any leathers here you can take.} {#var profession[gather][selling] 0}
